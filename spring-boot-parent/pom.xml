<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.yangbingdong</groupId>
        <artifactId>spring-boot-parent-dependencies</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../spring-boot-parent-dependencies/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>spring-boot-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <spring-boot-common.version>0.0.1-SNAPSHOT</spring-boot-common.version>
        <!-- maven 方式跳过 maven test, 等同 mvn package -Dmaven.test.skip=true -->
        <!-- Spring Boot 内部已经集成 maven-surefire-plugin 插件，可使用 <skipTests>true</skipTests> 跳过测试 -->
        <!-- 两者的区别在于 <maven.test.skip> 标签连 .class 文件都不会生成，而 <skipTests> 会编译生成 .class 文件-->
        <maven.test.skip>true</maven.test.skip>

        <!-- ########## Docker 相关变量 ########## -->
        <!-- resource插件编译Dockerfile后的位置-->
        <dockerfile.compiled.position>${project.build.directory}/docker</dockerfile.compiled.position>
        <!-- 是否跳过构建docker -->
        <docker.skip.build>true</docker.skip.build>
        <!-- 是否构建镜像 -->
        <docker.push.image>false</docker.push.image>
        <docker.registry.url>192.168.0.202:8080</docker.registry.url>
        <docker.registry.name>dev-images</docker.registry.name>
        <docker-latest-tag>latest</docker-latest-tag>
    </properties>

    <dependencies>
        <!-- 通用工具包 -->
        <dependency>
            <groupId>com.yangbingdong</groupId>
            <artifactId>spring-boot-common</artifactId>
            <version>${spring-boot-common.version}</version>
        </dependency>

        <!-- Spring Boot 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <!-- 去除 logback 依赖 -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 高性能日志框架 Log4j2 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- Log4j2 异步支持，Disruptor 超高性能并发框架 -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
        </dependency>

        <!-- 提供 Spring Boot 测试支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- webflux 依赖 H2控制台不支持 -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <exclusions>
                &lt;!&ndash; 移除默认web容器，使用undertow &ndash;&gt;
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-reactor-netty</artifactId>
                </exclusion>
            </exclusions>
        </dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!-- 移除默认web容器，使用undertow -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 使用高性能 Web 容器 undertow -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <!-- 提供自定义元数据支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-json</artifactId>
        </dependency>

        <!-- Lombok简洁代码插件 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Ali fastjson  -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- resources插件，使用@变量@形式获取Maven变量到Dockerfile中 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resources.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-dockerfile</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <!-- 编译后Dockerfile的输出位置 -->
                                <outputDirectory>${dockerfile.compiled.position}</outputDirectory>
                                <resources>
                                    <!-- Dockerfile位置 -->
                                    <resource>
                                        <directory>${project.basedir}/src/main/docker</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- 集成Docker maven 插件 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>push-image</id>
                            <phase>install</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <imageName>${docker.registry.url}/${docker.registry.name}/${project.artifactId}:${docker-latest-tag}</imageName>
                                <imageName>${docker.registry.url}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <!--配置变量，包括是否build、imageName、imageTag，非常灵活-->
                        <skipDocker>${docker.skip.build}</skipDocker>
                        <!--最后镜像产生了两个tag，版本和和最新的-->
                        <forceTags>true</forceTags>
                        <imageTags>
                            <imageTag>${project.version}</imageTag>
                            <imageTag>${docker-latest-tag}</imageTag>
                        </imageTags>
                        <!--install阶段也上传，否则只有deploy阶段上传-->
                        <pushImage>${docker.push.image}</pushImage>
                        <!-- 配置镜像名称，遵循Docker的命名规范： springio/image -->
                        <imageName>${docker.registry.url}/${docker.registry.name}/${project.artifactId}</imageName>
                        <!-- Dockerfile位置，由于配置了编译时动态获取Maven变量，真正的Dockerfile位于位于编译后位置 -->
                        <dockerDirectory>${dockerfile.compiled.position}</dockerDirectory>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                        <!--push到私有的hub-->
                        <serverId>docker-registry</serverId>
                        <registryUrl>${docker.registry.url}</registryUrl>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>